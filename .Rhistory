library(class)
set.seed(123)
sample_indices <- sample(1:nrow(wine), 0.7 * nrow(wine))
train_data <- wine[sample_indices, ]
test_data <- wine[-sample_indices, ]
library(class)
# Define predictors and response variable
predictors <- names(wine)[2:13]  # Adjust column indices based on your data
response <- "quality"
train_data$quality_category <- as.factor(train_data$quality_category)
k <- 5  # You can adjust the value of k
knn_model <- knn(train = train_data[, predictors], test = test_data[, predictors], cl = train_data$quality_category, k = k)
confusion_matrix <- table(Actual = test_data$quality_category, Predicted = knn_model)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
# Display the confusion matrix and accuracy
print(confusion_matrix)
cat("Accuracy:", accuracy, "\n")
str(knn_model)
length(knn_model)
table(knn_model)
library(caret)
set.seed(123)
cv <- trainControl(method = "cv", number = 10)
model <- train(quality_category ~ ., data = train_data, method = "knn", trControl = cv)
model
library(rpart)
set.seed(123)
trainIndex <- sample(nrow(wine), 0.9 * nrow(wine))
trainData <- wine[trainIndex, ]
testData <- wine[-trainIndex, ]
tree_model <- rpart(quality ~ fixed.acidity + volatile.acidity + residual.sugar + free.sulfur.dioxide + density + pH + sulphates + alcohol, data = trainData)
print(summary(tree_model))
library(rpart.plot)
rpart.plot(tree_model, digits = 4, extra = 1)
# Load necessary packages
install.packages("rpart")
library(rpart)
library(rpart.plot)
# Set seed for reproducibility
set.seed(123)
# Assuming 'wine_data' is your data frame
# Replace 'wine_data.csv' with your actual file or data
wine_data <- read.csv("winequalityN.csv")
# Check for missing values
# If there are missing values, you might need to handle them before building the model
# Assuming 'quality' is your target variable
# Split the data into training and testing sets
sample_index <- sample(1:nrow(wine_data), 0.8 * nrow(wine_data))
train_data <- wine_data[sample_index, ]
test_data <- wine_data[-sample_index, ]
# Specify the columns for the model
selected_columns <- c("fixed.acidity", "volatile.acidity", "residual.sugar", "free.sulfur.dioxide", "density", "pH", "sulphates", "alcohol")
# Build the decision tree model
tree_model <- rpart(quality ~ ., data = train_data[, c("quality", selected_columns)], method = "class")
# Display the Decision Tree
rpart.plot(tree_model, digits = 4, extra = 1)
# Make predictions on the test set
predictions <- predict(tree_model, test_data[, selected_columns], type = "class")
# Evaluate the model
conf_matrix <- table(predictions, test_data$quality)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
# Display the confusion matrix and accuracy
print("Confusion Matrix:")
print(conf_matrix)
print(paste("Accuracy: ", round(accuracy, 4)))
wine_data <- read.csv("winequalityN.csv")
red <- wine[wine$type == "red", ]
white <- wine[wine$type == "white", ]
index <- sample(nrow(white), nrow(white)*0.90)
white_train = white[index,]
white_test = white[-index,]
index <- sample(nrow(red), nrow(red)*0.90)
red_train = red[index,]
red_test = red[-index,]
white_lm_reg <- lm(quality ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + total.sulfur.dioxide + free.sulfur.dioxide + density + pH + sulphates + alcohol, data = white_train)
summary(white_lm_reg)
white_lm_reg <- lm(quality ~ fixed.acidity + citric.acid + residual.sugar + free.sulfur.dioxide + density + pH + sulphates + alcohol, data = white_train)
summary(white_lm_reg)
white <- white %>%
mutate(quality_category = ifelse(quality < 6, 0, 1))
head(white)
white_wine_log <- glm(quality_category ~fixed.acidity + citric.acid + residual.sugar + free.sulfur.dioxide + density + pH + sulphates + alcohol, data = white, binomial(link = "logit"))
summary(white_wine_log)
exp(coef(white_wine_log))
loadPkg(regclass)
conf_matrix_white = confusion_matrix(white_wine_log)
unloadPkg(regclass)
xkabledply(conf_matrix_white,"Confusion Matrix: Logit model")
```
install.packages("rpart")
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
index <- sample(nrow(white), nrow(white)*0.90)
white_train = white[index,]
white_test = white[-index,]
#creating testing and training sets for the red wine
index <- sample(nrow(red), nrow(red)*0.90)
red_train = red[index,]
red_test = red[-index,]
white_lm_reg <- lm(quality ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + total.sulfur.dioxide + free.sulfur.dioxide + density + pH + sulphates + alcohol, data = white_train)
summary(white_lm_reg)
white_lm_reg <- lm(quality ~ fixed.acidity + citric.acid + residual.sugar + free.sulfur.dioxide + density + pH + sulphates + alcohol, data = white_train)
summary(white_lm_reg)
white_rpart <- rpart(formula = quality ~ ., data = white_train)
white <- white %>%
mutate(quality_category = ifelse(quality < 6, 0, 1))
library(ezids)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(knitr)
library(kableExtra)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# use this function to conveniently load libraries and work smoothly with knitting
# can add quietly=T option to the require() function
loadPkg = function(pkg, character.only = FALSE) {
if (!character.only) { pkg <- as.character(substitute(pkg)) }
pkg <- ifelse(!character.only, as.character(substitute(pkg)) , pkg)
if (!require(pkg,character.only=T, quietly =T)) {  install.packages(substitute(pkg),dep=T); if(!require(pkg,character.only=T)) stop("Package not found") }
}
loadPkg(knitr)
# unload/detact package when done using it
unloadPkg = function(pkg, character.only = FALSE) {
if(!character.only) { pkg <- as.character(substitute(pkg)) }
search_item <- paste("package", pkg,sep = ":")
while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) }
}
wine=read.csv("winequalityN.csv")
xkabledplyhead(wine)
xkabledplytail(wine)
#xkablesummary(wine)
xkablesummary(wine)
wine <- unique(wine)
xkablesummary(wine)
wine <- na.omit(wine)
# str(wine)
xkablesummary(wine)
ggplot(data = wine, aes(x = quality)) +
geom_bar(width = 0.8, color = 'black', fill = I('yellow')) +
labs(
title = "Overall Wine Quality",
x = "Quality",
y = "Data - Red & white wine"
)
p1 <- ggplot(data = wine, aes(x = citric.acid)) +
geom_bar(fill = I('blue')) +
labs(
title = "Citric Acidity",
x = "Concentration [g/L]",
y = "Data"
)
p2 <- ggplot(data = wine, aes(x = pH)) +
geom_bar( fill = I('blue')) +
labs(
title = "pH",
x = "pH",
y = "Data"
)
p3 <- ggplot(data = wine, aes(x = residual.sugar)) +
geom_histogram(binwidth = 1,  fill = I('blue')) +
labs(
title = "Residual Sugar",
x = "Residual Sugar (g/L)",
y = "Data"
)
p4 <- ggplot(data = wine, aes(x = density)) +
geom_histogram(binwidth = 0.002,  fill = I('blue')) +
labs(
title = "Density",
x = "Density",
y = "Data"
)
p5 <- ggplot(data = wine, aes(x = chlorides)) +
geom_histogram(binwidth = 0.005,  fill = I('blue')) +
labs(
title = "Chlorides",
x = "Chloride Content (g/L)",
y = "Data"
)
p6 <-  ggplot(data = wine, aes(x = alcohol)) +
geom_histogram(binwidth = 1,  fill = I('blue')) +
labs(
title = "Alcohol Content",
x = "Alcohol Content (% by volume)",
y = "Data"
)
grid.arrange(p1,p2,p3,p4,p5,p6, nrow = 3)
p7 <- ggplot(data = wine, aes(x = fixed.acidity)) +
geom_bar( fill = I('blue')) +
labs(
title = "Fixed Acidity",
x = "TaOH Concentration [g/L]",
y = "Data"
)
p8 <- ggplot(data = wine, aes(x = volatile.acidity)) +
geom_bar(  fill = I('blue')) +
labs(
title = "Volatile Acidity",
x = "AcOH Concentration [g/L]",
y = "Data"
)
p9 <- ggplot(wine, aes(x = free.sulfur.dioxide)) +
geom_histogram(binwidth = 5,  fill = I('blue')) +
labs(
title = "Free Sulfur Dioxide Concentration",
x = "Concentration (mg/L)",
y = "Data"
)
p10 <- ggplot(wine, aes(x = total.sulfur.dioxide)) +
geom_histogram(binwidth = 20, fill = "blue") +
labs(
title = "Total Sulfur Dioxide Concentration",
x = "Concentration (mg/L)",
y = "Data"
)
grid.arrange(p7,p8, p9,p10, nrow = 2)
p1 <- ggplot(data = wine, aes(x = "", y = fixed.acidity )) +
geom_boxplot(color = 'black', fill = I('white')) +
labs(
x = "Fixed Acidity",
y = "TaOH Concentration [g/L]"
)
p2 <- ggplot(data = wine, aes(x = "", y = volatile.acidity)) +
geom_boxplot(color = 'black', fill = I('white')) +
labs(
x = "Volatile Acidity",
y = "AcOH Concentration [g/L]"
)
p3 <- ggplot(data = wine, aes(x = "", y = citric.acid)) +
geom_boxplot(color = 'black', fill = I('white')) +
labs(
x = "Citric Acidity",
y = "Concentration [g/L]"
)
p4 <- ggplot(data = wine, aes(x = "", y = pH))+
geom_boxplot(color = 'black', fill = I('white')) +
labs(
x = "pH",
y = "pH"
)
grid.arrange(p1,p2, p3,p4, nrow = 1)
numeric_data <- subset(wine, select = -c(type))
redd <- subset(wine, type == "red")
numeric_datared <- subset(redd, select = -c(type))
whited <- subset(wine, type == "white")
numeric_datawhite <- subset(whited, select = -c(type))
loadPkg("corrplot")
cor_matrix <-cor(numeric_data)
corrplot(cor_matrix, method="circle",type="upper")
numeric_data <- subset(wine, select = -c(type))
# Subset the dataset into red and white wines
red <- wine[wine$type == "red", ]
white <- wine[wine$type == "white", ]
library(ggplot2)
ggplot(wine, aes(x = as.factor(quality), y = alcohol)) +
geom_boxplot(fill = "brown", color = "darkblue") +
labs(x = "Wine Quality", y = "Alcohol") +
ggtitle("Box Plot of Alcohol vs Quality")
t_test_alcohol <- t.test(red$alcohol,white$alcohol, level=0.05)
p <- t_test_alcohol$p.value
library(ggplot2)
red <- subset(wine, type == "red")
white <- subset(wine, type == "white")
ggplot() +
geom_boxplot(data = red, aes(x = as.factor(quality), y = alcohol, fill = "red"), width = 0.4) +
labs(x = "Wine Quality", y = "Alcohol", fill = "Wine Color") +
ggtitle("Box Plot of Alcohol vs Quality for Red Wines") +
scale_fill_manual(values = c("red" = "red"))
ggplot() +
geom_boxplot(data = white, aes(x = as.factor(quality), y = alcohol, fill = "white"), width = 0.4) +
labs(x = "Wine Quality", y = "Alcohol", fill = "Wine Color") +
ggtitle("Box Plot of Alcohol vs Quality for White Wines") +
scale_fill_manual(values = c("white" = "white"))
anova_result <- aov(alcohol ~  as.factor(quality), data = red, conf.level = 0.95)
print(summary(anova_result))
tukey_test <- TukeyHSD(anova_result)
summary(tukey_test)
anova_result <- aov(alcohol ~  as.factor(quality), data = white)
print(summary(anova_result))
tukey_test <- TukeyHSD(anova_result)
tukey_test
library(ggplot2)
# Density Distribution by Wine Quality
ggplot(wine, aes(x = factor(quality), y = density)) +
geom_boxplot(fill = "lightblue") +
labs(x = "Quality", y = "Density") +
ggtitle("Density Distribution by Wine Quality")+
ylim(1, 1.001)  # Adjust the limits as needed
t_test_density <- t.test(red$density,white$density, level=0.05)
p <- t_test_density$p.value
print(p)
# Box Plot of Density vs Quality for Red Wines
ggplot() +
geom_boxplot(data = red, aes(x = as.factor(quality), y = density, fill = "light coral"), width = 0.4) +
labs(x = "Wine Quality", y = "Density", fill = "light coral") +
ggtitle("Box Plot of Density vs Quality for Red Wines") +
scale_fill_manual(values = c("light coral" = "light coral"))
# Box Plot of Density vs Quality for White Wines
ggplot() +
geom_boxplot(data = white, aes(x = as.factor(quality), y = density, fill = "red"), width = 0.4) +
labs(x = "Wine Quality", y = "Density", fill = "red") +
ggtitle("Box Plot of Density vs Quality for White Wines") +
scale_fill_manual(values = c("red" = "red"))
anova_result <- aov(density ~  as.factor(quality), data = red, conf.level = 0.95)
print(summary(anova_result))
tukey_test <- TukeyHSD(anova_result)
tukey_test
anova_result <- aov(density ~  as.factor(quality), data = white)
print(summary(anova_result))
tukey_test <- TukeyHSD(anova_result)
tukey_test
ggplot(wine, aes(x = factor(quality), y = chlorides)) +
geom_boxplot(fill = "lightcoral") +
labs(x = "Quality", y = "Chlorides") +
ggtitle("Chloride Distribution by Wine Quality") +
ylim(0, 0.2)
t_test_chloride <- t.test(red$chlorides,white$chlorides, level=0.05)
p <- t_test_chloride$p.value
print(p)
ggplot(red, aes(x = factor(quality), y = chlorides)) +
geom_boxplot(fill = "yellow") +
labs(x = "Quality", y = "Chlorides") +
ggtitle("Chloride Distribution by Wine Quality (Red Wine)") +
ylim(0, 0.3)
ggplot(white, aes(x = factor(quality), y = chlorides)) +
geom_boxplot(fill = "coral") +
labs(x = "Quality", y = "Chlorides") +
ggtitle("Chloride Distribution by White Wine Quality") +
ylim(0, 0.2)
anova_result <- aov(chlorides ~  as.factor(quality), data = red, conf.level = 0.95)
print(summary(anova_result))
tukey_test <- TukeyHSD(anova_result)
tukey_test
anova_result <- aov(chlorides ~  as.factor(quality), data = white)
print(summary(anova_result))
tukey_test <- TukeyHSD(anova_result)
tukey_test
library(ggplot2)
ggplot(wine, aes(x = factor(quality), y = citric.acid)) +
geom_boxplot(fill = "lightpink") +
labs(x = "Quality", y = "Citric Acid") +
ggtitle("Citric Acid Distribution by Wine Quality")+
ylim(0.0,0.15)
t_test_citric <- t.test(red$citric.acid,white$citric.acid, level=0.05)
p <- t_test_citric$p.value
print(p)
ggplot(red, aes(x = factor(quality), y = citric.acid)) +
geom_boxplot(fill = "green") +
labs(x = "Quality", y = "Citric Acid") +
ggtitle("Citric Acid Distribution by Red Wine Quality")+
ylim(0.0,0.15)
ggplot(white, aes(x = factor(quality), y = citric.acid)) +
geom_boxplot(fill = "maroon") +
labs(x = "Quality", y = "Citric Acid") +
ggtitle("Citric Acid Distribution by White Wine Quality")+
ylim(0.0,0.15)
anova_result <- aov(citric.acid ~  as.factor(quality), data = red, conf.level = 0.95)
print(summary(anova_result))
tukey_test <- TukeyHSD(anova_result)
tukey_test
anova_result <- aov(citric.acid ~  as.factor(quality), data = white)
print(summary(anova_result))
tukey_test <- TukeyHSD(anova_result)
tukey_test
library(ggplot2)
ggplot(wine, aes(x = residual.sugar, y = density, color = factor(type))) +
geom_point() +ggtitle("Scatter plot for Density vs Sugar ") +
labs(x = "Sugar", y = "Density", color = "Wine Type")
ggplot(wine, aes(x = alcohol, y = density, color = factor(type))) +
geom_point() +  ggtitle("Scatter plot for Density vs Alcohol ") +
labs(x = "Alcohol", y = "Density", color = "Wine Type")
ggplot(wine, aes(x = alcohol, y = chlorides, color = factor(type))) +
geom_point() + ggtitle("Scatter plot for Chlorides vs Alcohol ") +
labs(x = "Alcohol", y = "Chlorides", color = "Wine Type")
ggplot(wine, aes(x = sulphates, y = residual.sugar, color = factor(type))) +
geom_point() +ggtitle("Scatter plot for Sulphates vs Sugar ") +
labs(x = "Sulphates", y = "Residual Sugar", color = "Wine Type")
loadPkg("leaps")
reg.best2 <- regsubsets(quality~., data = numeric_data, nbest = 2, method = "exhaustive")
plot(reg.best2, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best2, scale = "r2", main = "R^2")
plot(reg.best2, scale = "bic", main = "BIC")
plot(reg.best2, scale = "Cp", main = "Cp")
model1 = lm(quality ~ volatile.acidity+residual.sugar+free.sulfur.dioxide+total.sulfur.dioxide+pH+sulphates+alcohol, data=numeric_data)
sum_md1 = summary(model1) # also for later use on inline codes
sum_md1
predicted_values <- predict(model1, newdata = numeric_data)
# Calculate residuals (the differences between predicted and actual values)
residuals <- predicted_values - numeric_data$quality
# Calculate Mean Squared Error (MSE)
mse <- mean(residuals^2)
print(sqrt(0.53))
cat("MSE",mse,"\n")
wine <- wine %>%
mutate(quality_category = ifelse(quality < 6, 0, 1))
head(wine)
winelogit1 <- glm(quality_category ~volatile.acidity+residual.sugar+pH+sulphates+alcohol+free.sulfur.dioxide+total.sulfur.dioxide, data = wine, binomial(link = "logit"))
summary(winelogit1)
exp(coef(winelogit1))
loadPkg(regclass)
conf_matrix = confusion_matrix(winelogit1)
unloadPkg(regclass)
xkabledply(conf_matrix,"Confusion Matrix: Logit model, cutoff = 0.6")
true_positives <- 2786
true_negatives <- 1185
false_positives <-794
false_negatives <-530
total <- 5295
# Calculate accuracy
accuracy <- (true_positives + true_negatives) / total
cat("Accuracy of logistic regression model is", accuracy,"\n")
precision <- true_positives / (true_positives + false_positives)
cat(" Precision of logistic regression model is",  precision, "\n")
#install.packages("pROC")
loadPkg(pROC) # receiver operating characteristic curve, gives the diagnostic ability of a binary classifier system as its discrimination threshold is varied. The curve is on sensitivity/recall/true-positive-rate vs false_alarm/false-positive-rate/fall-out.
wine$prob=predict(winelogit1, type = c("response")) # Add new column of predicted probabilities
h <- roc(quality_category~prob, data=wine)
auc(h) # area-under-curve prefer 0.8 or higher.
plot(h)
#unloadPkg(pROC)
#### Hosmer and Lemeshow test
########The Hosmer and Lemeshow Goodness of Fit test can be used to evaluate logistic regression fit.
loadPkg(ResourceSelection) # function hoslem.test( ) for logit model evaluation
winelogit1_Hoslem = hoslem.test(wine$quality_category, fitted(winelogit1)) # Hosmer and Lemeshow test, a chi-squared test
unloadPkg(ResourceSelection)
winelogit1_Hoslem
# We can try this just to confirm the following calculation
wine_nulllogit1 <- glm(quality_category ~ 1, data = wine, family = "binomial")
mcFadden = 1 - logLik(winelogit1)/logLik(wine_nulllogit1)
mcFadden
loadPkg(pscl) # use pR2( ) function to calculate McFadden statistics for model eval
wineLogit1pr2 = pR2(winelogit1)
wineLogit1pr2
unloadPkg(pscl)
loadPkg("class")
library(class)
set.seed(123)
sample_indices <- sample(1:nrow(wine), 0.7 * nrow(wine))
train_data <- wine[sample_indices, ]
test_data <- wine[-sample_indices, ]
library(class)
# Define predictors and response variable
predictors <- names(wine)[2:13]  # Adjust column indices based on your data
response <- "quality"
train_data$quality_category <- as.factor(train_data$quality_category)
k <- 5  # You can adjust the value of k
knn_model <- knn(train = train_data[, predictors], test = test_data[, predictors], cl = train_data$quality_category, k = k)
confusion_matrix <- table(Actual = test_data$quality_category, Predicted = knn_model)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
precision <-confusion_matrix[2,2]/sum(diag(confusion_matrix))
confusion_matrix
# Display the confusion matrix and accuracy
print(confusion_matrix)
cat("Accuracy:", accuracy, "\n")
cat("Precision :", precision, "\n")
str(knn_model)
length(knn_model)
table(knn_model)
library(caret)
set.seed(123)
cv <- trainControl(method = "cv", number = 10)
model <- train(quality_category ~ ., data = train_data, method = "knn", trControl = cv)
model
library(rpart)
set.seed(123)
trainIndex <- sample(nrow(wine), 0.9 * nrow(wine))
trainData <- wine[trainIndex, ]
testData <- wine[-trainIndex, ]
tree_model <- rpart(quality ~ fixed.acidity + volatile.acidity + residual.sugar + free.sulfur.dioxide + density + pH + sulphates + alcohol, data = trainData)
print(summary(tree_model))
library(rpart.plot)
rpart.plot(tree_model, digits = 4, extra = 1)
red <- wine[wine$type == "red", ]
white <- wine[wine$type == "white", ]
white <- white %>%
mutate(quality_category = ifelse(quality < 6, 0, 1))
head(white)
winelogit1_white <- glm(quality_category ~volatile.acidity+residual.sugar+pH+sulphates+alcohol+free.sulfur.dioxide+total.sulfur.dioxide, data = white, binomial(link = "logit"))
summary(winelogit1_white)
exp(coef(winelogit1_white))
loadPkg(regclass)
conf_matrix = confusion_matrix(winelogit1_white)
unloadPkg(regclass)
loadPkg(regclass)
conf_matrix_white = confusion_matrix(winelogit1_white)
unloadPkg(regclass)
xkabledply(conf_matrix_white,"Confusion Matrix: Logit model, cutoff = 0.6")
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
xkabledply(conf_matrix,"Confusion Matrix: Logit model, cutoff = 0.6")
xkabledply(conf_matrix_white,"Confusion Matrix: Logit model, cutoff = 0.6")
red <- red %>%
mutate(quality_category = ifelse(quality < 6, 0, 1))
head(white)
winelogit1_red <- glm(quality_category ~volatile.acidity+residual.sugar+pH+sulphates+alcohol+free.sulfur.dioxide+total.sulfur.dioxide, data = red, binomial(link = "logit"))
summary(winelogit1_red)
exp(coef(winelogit1_red))
loadPkg(regclass)
conf_matrix_red = confusion_matrix(winelogit1_red)
unloadPkg(regclass)
xkabledply(conf_matrix_red,"Confusion Matrix: Logit model, cutoff = 0.6")
